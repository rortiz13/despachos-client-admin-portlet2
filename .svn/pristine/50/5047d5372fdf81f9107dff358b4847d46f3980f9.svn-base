package la.netco.despachos_judiciales.publico.business.bean;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.model.SelectItem;


import la.netco.despachos_judiciales.entities.model.Circuito;
import la.netco.despachos_judiciales.entities.model.ConsejoSeccional;
import la.netco.despachos_judiciales.entities.model.Departamento;
import la.netco.despachos_judiciales.entities.model.Distrito;
import la.netco.despachos_judiciales.entities.model.Entidad;
import la.netco.despachos_judiciales.entities.model.Especialidad;
import la.netco.despachos_judiciales.entities.model.Municipio;
import la.netco.despachos_judiciales.entities.service.CircuitoLocalServiceUtil;
import la.netco.despachos_judiciales.entities.service.ConsejoSeccionalLocalServiceUtil;
import la.netco.despachos_judiciales.entities.service.DepartamentoLocalServiceUtil;
import la.netco.despachos_judiciales.entities.service.DistritoLocalServiceUtil;
import la.netco.despachos_judiciales.entities.service.EntidadLocalServiceUtil;
import la.netco.despachos_judiciales.entities.service.EspecialidadLocalServiceUtil;
import la.netco.despachos_judiciales.entities.service.MunicipioLocalServiceUtil;
import la.netco.despachos_judiciales.publico.business.bean.utilitys.ConstantsUtility;
import la.netco.despachos_judiciales.publico.business.datamodels.DespachosDataModel;


import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;

@ManagedBean(name = "consultaAvanzadaBean")
@ViewScoped
public class ConsultaAvanzadaBean implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static Log _log = LogFactoryUtil.getLog(ConsultaAvanzadaBean.class);

	private List<SelectItem> itemsMunicipios;
	private List<SelectItem> itemsEntidad;
	private List<SelectItem> itemsEspecialidad;
	private List<SelectItem> itemsDistritos;
	private List<SelectItem> itemsConsejos;
	private List<SelectItem> itemsCircuitos;
	private HashMap<Integer, String> mapDepartamentos;

	private Integer idDepartamento, idMunicipio, idEspecialidad, idEntidad,idConsejo,idDistrito,idCircuito;
	private String departamentoMunicipio;

	private DespachosDataModel despachos;

	private boolean preRenderFlag;

	public ConsultaAvanzadaBean() {
		
	}

	@PostConstruct
	public void init() {
		System.out.println(">>> init");
		loadItemsMunicipios();
		loadItemsEntidad();
		loadItemsEspecialidad();
		loadDistritos();
		loadCircuitos();
		loadConsejos();
	}

	public void municipioChange() {
		idEntidad = null;
		idEspecialidad = null;
		splitMunicipioDepartamento();
		init();
	}

	public void entidadChange() {
		idEspecialidad = null;
		loadItemsEspecialidad();

	}

	public void cleanForm() {
		idEspecialidad = null;
		idEntidad = null;
		idDepartamento = null;
		idMunicipio = null;
		departamentoMunicipio = null;
		despachos = null;
		idCircuito = null;
		idConsejo = null;
		idDistrito = null;
		loadItemsMunicipios();
		loadItemsEntidad();
		loadItemsEspecialidad();
		loadDistritos();
		loadCircuitos();
		loadConsejos();
	}

	
	private void loadDistritos(){
		try {
			itemsDistritos = new ArrayList<SelectItem>();
			List<Distrito> listDistritos = DistritoLocalServiceUtil.findByDespacho(idConsejo, idDepartamento, idMunicipio);
			for (Distrito distrito : listDistritos) {
				itemsDistritos.add(new SelectItem(distrito.getCodigo(), distrito.getNombre()));
			}
		} catch (Exception e) {
			_log.error("Exception loadDistritos", e);
		}
	}
	
	private void loadCircuitos(){
		try {
			itemsCircuitos = new ArrayList<SelectItem>();
			List<Circuito> listCircuitos = CircuitoLocalServiceUtil.findByDespacho(idConsejo, idDistrito, idDepartamento, idMunicipio);
			for (Circuito circuito : listCircuitos) {
				itemsCircuitos.add(new SelectItem(circuito.getCodigo(), circuito.getNombre()));
			}
		} catch (Exception e) {
			_log.error("Exception loadCircuitos", e);
		}
	}
	
	private void loadConsejos (){
		try {
			itemsConsejos = new ArrayList<SelectItem>();
			List<ConsejoSeccional> listConsejoSeccional = ConsejoSeccionalLocalServiceUtil.findByDespacho(idDepartamento, idMunicipio);
			for (ConsejoSeccional consejoSeccional : listConsejoSeccional) {
				itemsConsejos.add(new SelectItem(consejoSeccional.getCodigo(), consejoSeccional.getNombre()));
			}
		} catch (Exception e) {
			_log.error("Exception loadConsejos", e);
		}
	}
	
	private void loadItemsMunicipios() {
		try {

			if (mapDepartamentos == null) {
				mapDepartamentos = new HashMap<Integer, String>();
				List<Departamento> listDepartamentos = DepartamentoLocalServiceUtil.getDepartamentos(QueryUtil.ALL_POS, QueryUtil.ALL_POS);
				for (Departamento departamento : listDepartamentos) {
					mapDepartamentos.put(departamento.getCodigo(), departamento.getNombre());
				}

			}
			List<Municipio> listMunicipios = MunicipioLocalServiceUtil.findByEstadoDescpacho(null);
			itemsMunicipios = new ArrayList<SelectItem>();
			for (Municipio municipio : listMunicipios) {
				itemsMunicipios.add(new SelectItem(municipio.getCodigo() + "-" + municipio.getIdDepartamento(), municipio.getNombre() + " - "
						+ mapDepartamentos.get(municipio.getIdDepartamento()).toString()));
			}
		} catch (Exception e) {
			_log.error("Exception loadItemsMunicipios", e);
		}

	}

	private void loadItemsEntidad() {
		try {
			itemsEntidad = new ArrayList<SelectItem>();
			List<Entidad> listEntidades = EntidadLocalServiceUtil.findByEstadoDescpacho(idDepartamento, idMunicipio);
			for (Entidad entidad : listEntidades) {
				itemsEntidad.add(new SelectItem(entidad.getCodigo(), entidad.getNombre()));
			}
		} catch (Exception e) {
			_log.error("Exception loadItemsEntidad", e);
		}
	}

	private void loadItemsEspecialidad() {
		try {
			itemsEspecialidad = new ArrayList<SelectItem>();
			List<Especialidad> listEspecialidad = EspecialidadLocalServiceUtil.findByEstadoDescpacho(idDepartamento, idMunicipio, idEntidad);
			for (Especialidad especialidad : listEspecialidad) {
				itemsEspecialidad.add(new SelectItem(especialidad.getCodigo(), especialidad.getNombre()));
			}
		} catch (Exception e) {
			_log.error("Exception loadItemsEspecialidad", e);
		}

	}
	
	private void splitMunicipioDepartamento() {
		if (departamentoMunicipio != null) {
			String valores[] = departamentoMunicipio.split("-");
			idMunicipio = Integer.parseInt(valores[0]);
			idDepartamento = Integer.parseInt(valores[1]);
		} else {
			idMunicipio = null;
			idDepartamento = null;
		}
	}

	/* Metodos datamodel */

	public String cargaFiltrosDataModel() {
		if (despachos == null)
			despachos = new DespachosDataModel();
		Map<String, Integer> filtros = new HashMap<String, Integer>();
		filtros.put(ConstantsUtility.FIELD_ID_DEPARTAMENTO, idDepartamento);
		filtros.put(ConstantsUtility.FIELD_ID_MUNICIPIO, idMunicipio);
		filtros.put(ConstantsUtility.FIELD_ID_ENTIDAD, idEntidad);
		filtros.put(ConstantsUtility.FIELD_ID_ESPECIALIDAD, idEspecialidad);
		filtros.put(ConstantsUtility.FIELD_ID_CIRCUITO, idCircuito);
		filtros.put(ConstantsUtility.FIELD_ID_CONSEJOSEC, idConsejo);
		filtros.put(ConstantsUtility.FIELD_ID_DISTRTO, idDistrito);
		despachos.setFiltros(filtros);
		return "";

	}

	/**/
	public List<SelectItem> getItemsMunicipios() {
		return itemsMunicipios;
	}

	public void setItemsMunicipios(List<SelectItem> itemsMunicipios) {
		this.itemsMunicipios = itemsMunicipios;
	}

	public List<SelectItem> getItemsEntidad() {
		return itemsEntidad;
	}

	public void setItemsEntidad(List<SelectItem> itemsEntidad) {
		this.itemsEntidad = itemsEntidad;
	}

	public List<SelectItem> getItemsEspecialidad() {
		return itemsEspecialidad;
	}

	public void setItemsEspecialidad(List<SelectItem> itemsEspecialidad) {
		this.itemsEspecialidad = itemsEspecialidad;
	}

	public Integer getIdDepartamento() {
		return idDepartamento;
	}

	public void setIdDepartamento(Integer idDepartamento) {
		this.idDepartamento = idDepartamento;
	}

	public Integer getIdMunicipio() {
		return idMunicipio;
	}

	public void setIdMunicipio(Integer idMunicipio) {
		this.idMunicipio = idMunicipio;
	}

	public Integer getIdEspecialidad() {
		return idEspecialidad;
	}

	public void setIdEspecialidad(Integer idEspecialidad) {
		this.idEspecialidad = idEspecialidad;
	}

	public Integer getIdEntidad() {
		return idEntidad;
	}

	public void setIdEntidad(Integer idEntidad) {
		this.idEntidad = idEntidad;
	}

	public HashMap<Integer, String> getMapDepartamentos() {
		return mapDepartamentos;
	}

	public String getDepartamentoMunicipio() {
		return departamentoMunicipio;
	}

	public void setDepartamentoMunicipio(String departamentoMunicipio) {
		this.departamentoMunicipio = departamentoMunicipio;
	}

	public void setMapDepartamentos(HashMap<Integer, String> mapDepartamentos) {
		this.mapDepartamentos = mapDepartamentos;
	}

	public DespachosDataModel getDespachos() {
		return despachos;
	}

	public void setDespachos(DespachosDataModel despachos) {
		this.despachos = despachos;
	}

	public boolean isPreRenderFlag() {
		return preRenderFlag;
	}

	public void setPreRenderFlag(boolean preRenderFlag) {
		this.preRenderFlag = preRenderFlag;
	}

	public List<SelectItem> getItemsDistritos() {
		return itemsDistritos;
	}

	public void setItemsDistritos(List<SelectItem> itemsDistritos) {
		this.itemsDistritos = itemsDistritos;
	}

	public List<SelectItem> getItemsConsejos() {
		return itemsConsejos;
	}

	public void setItemsConsejos(List<SelectItem> itemsConsejos) {
		this.itemsConsejos = itemsConsejos;
	}

	public List<SelectItem> getItemsCircuitos() {
		return itemsCircuitos;
	}

	public void setItemsCircuitos(List<SelectItem> itemsCircuitos) {
		this.itemsCircuitos = itemsCircuitos;
	}

	public Integer getIdConsejo() {
		return idConsejo;
	}

	public void setIdConsejo(Integer idConsejo) {
		this.idConsejo = idConsejo;
	}

	public Integer getIdDistrito() {
		return idDistrito;
	}

	public void setIdDistrito(Integer idDistrito) {
		this.idDistrito = idDistrito;
	}

	public Integer getIdCircuito() {
		return idCircuito;
	}

	public void setIdCircuito(Integer idCircuito) {
		this.idCircuito = idCircuito;
	}
	
	
}
